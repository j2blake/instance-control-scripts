#! /usr/bin/ruby

=begin
--------------------------------------------------------------------------------

Show the state of the current instance, and what Tomcats are running.

--------------------------------------------------------------------------------

Eventually, we want a display like this:

    current instance: develop (The develop instance)
    git status:
        Vitro:
        Vivo:
    [or is distribution vivo-rel-1.6.2]
    tomcat is [not] running.
    Other tomcats:
        port xxxx, /other/path/to/tomcat

--------------------------------------------------------------------------------
=end

$: << File.dirname(File.expand_path(__FILE__))
require 'common'
require 'pathname'
require 'rexml/document'

def show_instance_info()
  path = $settings.instance_path
  if path
    filename = File.basename(path)
    description = $settings.description || "_no description_"
    separator()
    puts "current instance: #{filename} (#{description})"
  else
    separator()
    puts "current instance: No current instance"
  end
end

def show_source_status()
  if is_git($settings.vivo_source)
    show_git_status()
  else
    show_release_status()
  end
end

def show_git_status()
  separator()
  puts "git status:"
  puts "    VIVO:"
  Dir.chdir($settings.vivo_source) { format_git_status(`git status`) }
  puts "    Vitro:"
  Dir.chdir($settings.vitro_source) { format_git_status(`git status`) }
end

def format_git_status(text)
  puts "        #{text.split("\n").join("\n        ")}"
end

def show_release_status()
  revision_info = get_revision_info($settings.vivo_source)
  separator()
  puts  "Source status: Released distribution: #{revision_info || "Unknown release."}"
end

def show_tomcat_status()
  # create an array of the paths of the running tomcats and their principal port numbers
  tomcat_info = []
  ps = `ps -ef | grep -e '-Dcatalina.home'`
  ps.split("\n").each() do |line|
    matches = /-Dcatalina.home=(\S+)/.match(line)
    if matches
      tomcat_path = matches[1]
      tomcat_port = find_tomcat_port(tomcat_path)
      tomcat_info << {:path => tomcat_path, :port => tomcat_port}
    end
  end

  if $settings.catalina_home
    my_tomcat_status = "Tomcat is not running"
    # dereference any symbolic links in the catalina_home
    begin
      my_tomcat_path = Pathname.new($settings.catalina_home).realpath.to_s
    rescue
      my_tomcat_status = "No Tomcat at #{$settings.catalina_home}"
      my_tomcat_path = nil
    end
  else
    my_tomcat_status = "Tomcat is not defined"
    my_tomcat_path = nil
  end

  tomcat_info.select!() do |info|
    if info[:path] == my_tomcat_path
      my_tomcat_status = "Tomcat is running on port #{info[:port]}"
      false
    else
      true
    end
  end

  separator()
  puts my_tomcat_status
  if !tomcat_info.empty?
    puts
    puts "Other tomcats:"
    tomcat_info.each() do |info|
      puts "    port #{info[:port]}, #{info[:path]}"
    end
  end

end

def find_tomcat_port(path)
  begin
    server_xml = File.expand_path('conf/server.xml', path)
    doc = REXML::Document.new(File.open(server_xml))
    doc.get_elements("Server/Service/Connector[@protocol='HTTP/1.1']").each do |e|
      return e.attribute('port').value()
    end
  rescue
    warning($!)
    "unknown"
  end
end

def show_settings()
  separator()
  puts "settings:"
  $settings.props().each_pair() do |k, v|
    puts "    #{k} = #{v}"
  end
end

def separator()
  puts
  puts "------------------------------------------------------------"
  puts
end

#
# ---------------------------------------------------------
# MAIN ROUTINE
# ---------------------------------------------------------
#

show_instance_info()
show_tomcat_status()
show_source_status()
show_settings()